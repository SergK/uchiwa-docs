<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides-rsses on Uchiwa Documentation</title>
    <link>https://docs.uchiwa.io/guides/index.xml</link>
    <description>Recent content in Guides-rsses on Uchiwa Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="https://docs.uchiwa.io/guides/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>High Availability</title>
      <link>https://docs.uchiwa.io/guides/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.uchiwa.io/guides/high-availability/</guid>
      <description>

&lt;h2 id=&#34;datacenters-high-availability&#34;&gt;Datacenters High Availability&lt;/h2&gt;

&lt;p&gt;You can define multiple Sensu APIs by datacenter in order to provide &lt;strong&gt;failover&lt;/strong&gt;
and rudimentary &lt;strong&gt;load balancing&lt;/strong&gt; between these APIs.&lt;/p&gt;

&lt;p&gt;To get started with this feature, you&amp;rsquo;ll simply need to define at least two
&lt;a href=&#34;https://docs.uchiwa.io/getting-started/configuration/#datacenters-configuration-sensu&#34;&gt;Sensu objects&lt;/a&gt;
 with the &lt;strong&gt;same name&lt;/strong&gt;. Here&amp;rsquo;s a basic example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;sensu&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;us-east-1&amp;quot;,
      &amp;quot;host&amp;quot;: &amp;quot;10.0.0.1&amp;quot;,
      &amp;quot;port&amp;quot;: 4567
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;us-east-1&amp;quot;,
      &amp;quot;host&amp;quot;: &amp;quot;10.0.0.2&amp;quot;,
      &amp;quot;port&amp;quot;: 4567
    }
  ]  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this configuration, the datacenter &lt;em&gt;us-east-1&lt;/em&gt; now has two APIs (&lt;em&gt;10.0.0.1&lt;/em&gt; and &lt;em&gt;10.0.0.2&lt;/em&gt;) and Uchiwa will balance the requests between these two APIs and failback to the second API in case of connectivity issue.&lt;/p&gt;

&lt;h2 id=&#34;uchiwa-high-availability&#34;&gt;Uchiwa High Availability&lt;/h2&gt;

&lt;p&gt;If you are using Uchiwa built-in authentication and wish to run multiple
instances of Uchiwa together, you will need to adjust your configuration.&lt;/p&gt;

&lt;p&gt;Uchiwa generates a temporary key during its launch, which is later destroyed once the process is stopped or restarted. This key is used for generating and validating the signatures of the JSON Web Tokens (JWT) for authentication.&lt;/p&gt;

&lt;p&gt;This behaviour is problematic when multiple instances of Uchiwa are used behind a load balancer or if the Uchiwa process needs to be frequently restarted. To use your own keys, follow these few steps:&lt;/p&gt;

&lt;p&gt;Generate the private key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl genrsa -out uchiwa.rsa 2048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract the public key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl rsa -in uchiwa.rsa -pubout &amp;gt; uchiwa.rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjust the &lt;em&gt;uchiwa&lt;/em&gt; object in your configuration file in order to specify the path of the keys you just generated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;uchiwa&amp;quot;: {
    &amp;quot;auth&amp;quot;: {
      &amp;quot;privatekey&amp;quot;: &amp;quot;/path/to/uchiwa.rsa&amp;quot;,
      &amp;quot;publickey&amp;quot;: &amp;quot;/path/to/uchiwa.rsa.pub&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, restart Uchiwa and you should see the following entry in your log:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[...]
&amp;quot;message&amp;quot;:&amp;quot;Provided RSA keys successfully loaded&amp;quot;
[...]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://docs.uchiwa.io/guides/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.uchiwa.io/guides/security/</guid>
      <description>

&lt;h2 id=&#34;encrypted-passwords&#34;&gt;Encrypted Passwords&lt;/h2&gt;

&lt;p&gt;You can place hashed passwords in the &lt;em&gt;password&lt;/em&gt;
attributes, but only within the &lt;strong&gt;uchiwa&lt;/strong&gt; object, in order to obfuscate
users passwords in your configuration files.&lt;/p&gt;

&lt;p&gt;Please note that you must &lt;strong&gt;absolutely&lt;/strong&gt; use the &lt;code&gt;{crypt}&lt;/code&gt; prefix when using an encrypted
password. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;password&amp;quot;: &amp;quot;{crypt}$1$MteWnoFT$yhEi8KMxO794K0TIriZcI0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following algorithms are supported (along the commands to create the hashes):&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Algorithm&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;APR1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;openssl passwd -apr1 MY_PASSWORD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mkpasswd --method=MD5 MY_PASSWORD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SHA-256&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mkpasswd --method=SHA-256 MY_PASSWORD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SHA-512&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mkpasswd --method=SHA-512 MY_PASSWORD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;https-encryption&#34;&gt;HTTPS Encryption&lt;/h2&gt;

&lt;p&gt;You can serve all content over HTTPS, using Uchiwa, without the need of
a reverse proxy. To get started, follow these few steps:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; - Generate a private key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl genrsa -out uchiwa.key 2048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; - Generate a self-signed certificate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;openssl req -new -x509 -key uchiwa.key -out uchiwa.pem -days 365
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adjust the &lt;em&gt;uchiwa&lt;/em&gt; object in your configuration file in order to specify the
path of the keys you just generated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;uchiwa&amp;quot;: {
    &amp;quot;ssl&amp;quot;: {
      &amp;quot;certfile&amp;quot;: &amp;quot;/path/to/uchiwa.pem&amp;quot;,
      &amp;quot;keyfile&amp;quot;: &amp;quot;/path/to/uchiwa.key&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, restart Uchiwa and access your dashboard over HTTPS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>https://docs.uchiwa.io/guides/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.uchiwa.io/guides/troubleshooting/</guid>
      <description>

&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;

&lt;h3 id=&#34;how-do-i-disable-uchiwa-built-in-authentication&#34;&gt;How do I disable Uchiwa built-in authentication?&lt;/h3&gt;

&lt;p&gt;In order to remove Uchiwa authentication, you simply need to remove or
leave empty the &lt;strong&gt;user&lt;/strong&gt;, &lt;strong&gt;pass&lt;/strong&gt; and &lt;strong&gt;users&lt;/strong&gt; attributes from the
&lt;a href=&#34;https://docs.uchiwa.io/getting-started/configuration/#uchiwa-configuration&#34;&gt;Uchiwa Configuration&lt;/a&gt;
on your configuration file.&lt;/p&gt;

&lt;h2 id=&#34;checks&#34;&gt;Checks&lt;/h2&gt;

&lt;h3 id=&#34;my-standalone-check-does-not-appear-in-the-checks-view&#34;&gt;My standalone check does not appear in the checks view&lt;/h3&gt;

&lt;p&gt;Uchiwa uses the &lt;strong&gt;/checks&lt;/strong&gt; Sensu API endpoint to build the checks list. This
endpoint only provides the checks that are defined and known by the Sensu server
itself, therefore standalone checks that are only defined on some particular
clients can&amp;rsquo;t be shown. They will, however, appear in the client view since they
are part of the client history.&lt;/p&gt;

&lt;h3 id=&#34;why-can-t-i-see-the-details-of-a-standalone-check&#34;&gt;Why can&amp;rsquo;t I see the details of a standalone check?&lt;/h3&gt;

&lt;p&gt;Unless an event is created for this particular check, the details of a
standalone check, such as the command executed, are not available. See the
previous question for more details.&lt;/p&gt;

&lt;h2 id=&#34;errors&#34;&gt;Errors&lt;/h2&gt;

&lt;h3 id=&#34;i-see-the-error-message-401-unauthorized&#34;&gt;I see the error message &lt;em&gt;401 Unauthorized&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;If you configured a user/pass authentication on your Sensu API, you need to add
these details to your Uchiwa configuration by adding the user and pass attributes
in the proper datacenter object within the &lt;em&gt;sensu&lt;/em&gt; array, as shown on the
&lt;a href=&#34;https://docs.uchiwa.io/getting-started/configuration/#datacenters-configuration-sensu&#34;&gt;Datacenters Configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;i-see-the-error-message-x509-certificate-signed-by-unknown-authority&#34;&gt;I see the error message &lt;em&gt;x509: certificate signed by unknown authority&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;By default, Uchiwa will refuse to make any connection to an API with an invalid
SSL certificate, therefore it needs to be explicitly allowed.
See the &lt;strong&gt;insecure&lt;/strong&gt; attribute in the
&lt;a href=&#34;https://docs.uchiwa.io/getting-started/configuration/#datacenters-configuration-sensu&#34;&gt;Datacenters Configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;which-platforms-are-supported-by-uchiwa&#34;&gt;Which platforms are supported by Uchiwa?&lt;/h3&gt;

&lt;p&gt;Uchiwa binaries are compiled for linux, on 386 and amd64 architectures, and
packaged into DEB and RPM packages. If you wish to compile the binary for an
another operating system and compilation architecture,
refer yourself to the
&lt;a href=&#34;https://docs.uchiwa.io/getting-started/installation/#from-source&#34;&gt;Installation documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>